#!/usr/local/bin/perl

# EPSI file generator.
#
# Converts all types of EPS-files to the EPSI format where a bitmap preview
# is included. You need GhostScript to render the bitmaps for you.
#
# $Id$

$0 =~ s,.*/,,;  # use only base name

use Getopt::Std;
unless (getopts('iw:')) {
  die "Usage: $0 [-i] [-w <preview width>] [<file>]\n";
}

die 'To many files' if ($#ARGV > 0);
die 'Must specify file when using in-place editing\n' if $#ARGV != 0 && $opt_i;
$epsfile = $ARGV[0];

@epsfile = <>;			# slurp
die 'Not a PostScript file\n' unless ($epsfile[0] =~ /^%!PS-Adobe-/);

# Get the dimensions of the picture
for (@epsfile) {
   ($llx, $lly, $urx, $ury) =
      /^%%BoundingBox:\s*(-?[0-9\.]+)\s+(-?[0-9\.]+)\s+(-?[0-9\.]+)\s+(-?[0-9\.]+)/;
   last if defined($llx);
}
die "No %%BoundingBox found in file" unless defined($llx);

# Calculate 
$preview_width = int(($opt_w || 79) / 2) * 8;
$width  = $urx - $llx + 1;
$height = $ury - $lly + 1;
$scalefactor = $preview_width / $width;
$width  = int($width * $scalefactor);
$height = int($height * $scalefactor);

# Produce GhostScript program
$gsfile = "/tmp/gs$$.tmp";
open(GSFILE, ">$gsfile") || die "Can't write to file $gsfile";
print GSFILE <<"---EndGhostScriptProgram---";
%!GhostScript
/BITIMAGE_WIDTH $width def
/BITIMAGE_HEIGHT $height def
/BITIMAGE_FILE (%stdout) def

%---- Setup a memory device --------
[1 0 0 -1 0 BITIMAGE_HEIGHT]
BITIMAGE_WIDTH BITIMAGE_HEIGHT
%
% [1 1 1 rgbcolor 0 0 0 rgbcolor] <-- 2.3 arguments
% <ff 00>                         <-- 2.4 arguments from ghost\@aladdin.com
%
<ff 00> 
makeimagedevice
setdevice

%--- Some transformations
/showpage {} def
$scalefactor dup scale
$llx neg $lly neg translate

%--- The old EPS file
@epsfile

%---- Print bitmap on a file -------
/line BITIMAGE_WIDTH 8 idiv 1 add string def
/output BITIMAGE_FILE (w) file def
output (---------) writestring
output 10 write
0  1  BITIMAGE_HEIGHT 1 sub { %for
   output (%) writestring
   currentdevice exch
   line copyscanlines
   output exch writehexstring
   output 10 write
} for
output flushfile
quit
---EndGhostScriptProgram---

close GSFILE;
close STDIN;	# so that GhostScript can't read it.

@gsoutput = `gs -q -DNODISPLAY $gsfile`;   # run GhostScript
die "Can't run GhostScript" unless $? == 0;
unlink $gsfile;

@preview = grep(/^-----/ .. 1, @gsoutput);   # remove GhostScript garbage
shift(@preview);
if ($#preview < 0) {
  print STDERR "GhostScript gives no output for the specified file\n";
  print STDERR @gsoutput;
  exit 1;
}

if (defined $opt_i) {
   $outputfile = "epsi.tmp$$";
   open(EPSIFILE, ">$outputfile") || die "Can't create $outputfile";
   select EPSIFILE;
}

print shift(@epsfile);
$_ = shift(@epsfile);
while (/^%%/) {
  if (/^%%BoundingBox:/) {
    print "%%BoundingBox: $llx $lly $urx $ury\n" if !defined($boundingbox);
    $boundingbox = 1;
  } elsif (/^%%EndComments/) {
    last;
  } else {
    print;
  }
  $_ = shift(@epsfile);
}
print "%%BoundingBox: $llx $lly $urx $ury\n" if !defined($boundingbox);
print "%%EndComments
%%BeginPreview: $width $height 1 $height\n";
print @preview;
print "%%EndPreview\n";

print $_ unless /^%%/;
print grep(!(/^%%BeginPreview:/ .. /^%%EndPreview/) && !/^%%BoundingBox:/,
	   @epsfile);

if (defined $opt_i) {
   rename($epsfile, "$epsfile~") || die "Can't rename $epsfile";
   rename($outputfile, $epsfile) || die "Can't rename $outputfile to $epsfile";
}


__END__

=head1 NAME

eps2epsi - Filter for inclusion of a preview in an EPS file

=head1 SYNOPSIS

    eps2epsi [-i] [-w <preview_width>] [<eps-file>]

=head1 DESCRIPTION

The C<eps2epsi> program puts a preview section in a PostScript file
(preferably EPSF).  The preview produced is in the encapsulated
PostScript interchange format (EPSI) suitable for import by FrameMaker
and other document composing systems.

C<Eps2epsi>
reads the file specified (or standard input) and sends the new file
with the preview included to standard output.

C<Esp2epsi> uses B<GhostScript> to render the preview bitmap, which
means that B<GhostScript> must be installed at your system before you
can use C<eps2epsi>.

=head1 OPTIONS

=over 4

=item -i

Edit the file in-place. A backup file is made with the suffix ~.

=item -w <n>

Set the width (in characters) of the preview section. This also
specifies the resolution of the preview as I<n> times 4 horizontally.

=back


=head1 SEE ALSO

L<gs>

=head1 AUTHOR

Gisle Aas <aas@oslonett.no>

=cut
