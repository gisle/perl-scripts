#!/local/bin/perl

# $Id$

# Usage: cltree <c++ header files>
# Prints an overview over all C++ classses defined.

$/ = undef;
while (<>) {
   while (s/(class|struct)\s+(\w+)\s*(:\s*((public|protected|private|virtual)\s+)*\s*(\w+))?\s*(,\s*[^{]+)?\{//)
   {
      # class classname : public baseclass, private baseclass2 {
      #
      # $1 = class
      # $2 = classname
      # $3 = : public baseclass
      # $4 = public <ws>
      # $5 = public
      # $6 = baseclass
      # $7 = , private baseclass2

      $class = $2;
      if (defined($6)) {
         $parent{$class} = $6;
         $children{$6} .= "$class ";
         $parent_relationship{$6} = $5;
         $extra_parents{$class} = join(",",&base_split($7)) if defined($7);
         $classes{$6} = 1;  # in case base class in not defined
      }
      $file{$2} = $ARGV;
      $classes{$class} = 1;
   }
}

sub base_split
{
   local($_) = shift;
   s/,/ /g;
   s/(public|protected}private|virtual)//g;
   s/^\s+//;
   return split;
}


#------------------------------------ from the pstree program---
sub PAGE_TOP          { 842; }  # A4 height = 842, letter height = 792
#sub PAGE_RIGHT_EDGE  { 595; }
sub TB_MARGIN         { 60; }
sub LEFT_MARGIN       { 60; }
sub FONT              { "Times-Roman"; }
sub FONT_SIZE         { 10; }
sub LEVEL_INDENT      { 100; }

$y = &PAGE_TOP - &TB_MARGIN;
$prev_level = 0;
$average_char_width = &FONT_SIZE / 2;
$max_x_pos = 0;  # keep track of it in order produce bounding box

open(TMP,"+>/tmp/tree$$") || die "Can't create temporary file";
unlink("/tmp/tree$$");
select(TMP);


for $each (sort keys %classes) {
   &do_node($each, 0) unless defined($parent{$each});
}

seek(TMP,0,0); # rewind the temporary file

select(STDOUT);
print "%!PS-Adobe-3.0 EPSF-3.0\n";
print "%%Title: (Directory map of $ARGV[0])\n";
print "%%Creator: pstree, (C) 1991 Gisle Aas, NR\n";
printf "%%%%DocumentFonts: %s\n", &FONT;

if ($y < &TB_MARGIN) {
   $page_size = (&PAGE_TOP - 2 * &TB_MARGIN);
   $scale_factor = ($page_size)/((&PAGE_TOP - &TB_MARGIN ) - $y);
   printf "%%%%BoundingBox: %.0f %.0f %.0f %.0f\n",
       &LEFT_MARGIN, &TB_MARGIN + &FONT_SIZE * $scale_factor,
       &LEFT_MARGIN + $max_x_pos * $scale_factor,
       &PAGE_TOP - &TB_MARGIN + &FONT_SIZE * $scale_factor;
   printf "%.1f %.3f translate\n", &LEFT_MARGIN,
                                   (-$y)*$scale_factor + &TB_MARGIN;
   printf "%.5f dup scale\n", $scale_factor;
} else {
   printf "%%%%BoundingBox: %.0f %.0f %.0f %.0f\n",
       &LEFT_MARGIN, $y + &FONT_SIZE,
       &LEFT_MARGIN + $max_x_pos,
       &PAGE_TOP - &TB_MARGIN + &FONT_SIZE;
   printf "%.1f 0 translate\n", &LEFT_MARGIN;
};

print "/mws
{
    1 dict begin
    gsave
    /sw 4 index stringwidth pop def
    dup sw le { %if
      dup sw div
      dup 1 3 div lt {
	dup 3 mul
      } {
        1
      } ifelse
      matrix scale currentfont exch makefont setfont
      /sw exch def
    } { %else
      pop
    } ifelse
    % The stack is now: (string) x y
    moveto show
    grestore
    sw % leave width of string on stack
  end
} def
";
print  "/s {show} bind def\n";
print  "/m {moveto} bind def\n";
printf "/%s findfont %d scalefont setfont\n",&FONT,&FONT_SIZE;
print  "0.1 setlinewidth\n";

# copy temporary file to standard out
while (<TMP>) {
   print;
}
print "showpage\n";
exit;

#------------------------------------------


sub do_node
{
   local($node) = shift;
   local($level) = shift;
   
   for $child (sort split(/\s+/, $children{$node})) {
            &do_node($child, $level+1);
   }
   &emitt($node, $level);
}


# Uses the following global variables:
#    $y          : current vertical position (initial value = 'top of page')
#    $prev_level : the level reportet last time on emit (init value = 0)
#    @top        : current top position at different levels
#    @bottom     : current bottom position at different levels
#    @pos        : string of positions at different levels
sub emitt
{
   local($text) = shift;
   local($level) = shift;

   # Do some substitutions on the $text so that it can be used as a
   # PostScript string constant.
   $text =~ s/[\\\(\)]/\\$&/g;

   if ($level == $prev_level) {
      &write($level,$y,$text,1);
      $pos[$level] .= " $y";
      $bottom[$level] = $y;
      $y -= &FONT_SIZE + 10;
   }
   elsif ($level > $prev_level) {
      &write($level,$y,$text,1);
      local($i);
      for ($i=$prev_level+1;$i<$level;$i++) {
          $pos[$i] = '';
      }
      $pos[$level] = "$y";
      $top[$level] = $y;
      $bottom[$level] = $y;
      $y -= &FONT_SIZE + 10;
   }
   elsif ($level == ($prev_level - 1)) {
      local($ypos) = ($top[$level+1] - $bottom[$level+1]) / 2 + 
                     $bottom[$level+1];
      &write($level,$ypos,$text,0);
      &lines($level,$ypos,$pos[$level+1],$text);
      if ($pos[$level]) {
         $pos[$level] .= " $ypos";
         $bottom[$level] = $ypos;
      }
      else {
         $pos[$level] = "$ypos";
         $top[$level] = $ypos;
         $bottom[$level] = $ypos;
      }
   }
   else {
      die "Humm..., jump from level $prev_level to level $level";
   }
   $prev_level = $level;
}

sub write
{
   local($x,$y,$text,$pop_stringwidth) = @_;
   local($max_stringwidth) = &LEVEL_INDENT * 0.9;
   $x = $x * &LEVEL_INDENT;
   printf "(%s) %.1f %.1f %.2f mws", $text, $x, $y, $max_stringwidth;
   print " pop" if $pop_stringwidth;
   print "\n";
   printf "gsave /Times-Italic findfont 6 scalefont setfont %.1f %.1f m(%s)s "
       . "grestore\n", $x, $y - 6, $file{$text};
   # Try to estimate the width of the string
   local($stringwidth) = length($text) * $average_char_width;
   $x += $stringwidth > $max_stringwidth ? $max_stringwidth : $stringwidth;
   $max_x_pos = $x if ($x > $max_x_pos);
}

sub lines
{
   local($x,$y,$to,$text) = @_;
   local(@to) = split(/ /,$to);
   $x = $x * &LEVEL_INDENT;
   $y += &FONT_SIZE/3;
   printf "%.1f add %.1f m\n",$x+1,$y;
   printf "[";
   for (@to) { printf "%.1f ", $_ + &FONT_SIZE/3; }
   printf "]\n";
   printf "{gsave %.1f exch lineto stroke grestore} forall\n",
          $x + &LEVEL_INDENT - 4;
}
