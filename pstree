#!/usr/local/bin/perl
#
# pstree - produce directory layout map as PostScript.
#
# $Id$

use Getopt::Std;

$0 =~ s,.*/,,;  # use only base name
$Usage = "Usage: $0 [-afFlLv] [-d max_depth] [-e perl-expr] [dirname]]\n";

die $Usage unless getopts('ad:e:fFlLv');

$Version	= defined($opt_v) ? $opt_v : 0;
$ListAll	= defined($opt_a) ? $opt_a : 0;
$ExcludeFile	= defined($opt_e) ? $opt_e : 0;
$ListFiles	= defined($opt_f) ? $opt_f : 0;
$ListTypes	= defined($opt_F) ? $opt_F : 0;
$MaxDepth	= defined($opt_d) ? $opt_d : -1;
$ForceLinks	= defined($opt_L) ? $opt_L : 0;
$ShowLinkTarget	= defined($opt_l) ? $opt_l : 0;

if ($Version) {
   die 'pstree $Revision$ ($Date$)'."\n";
}

# Sanity checks:
die "pstree: max_depth must be numeric\n" unless $MaxDepth =~ /^-?\d+$/;

push(@ARGV, '.');
die "$0: $ARGV[0] does not exist, stopped" unless -e $ARGV[0];

sub PAGE_TOP          { 792; }
sub PAGE_RIGHT_EDGE   { 595; }
sub TB_MARGIN         { 60; }
sub LEFT_MARGIN       { 60; }
sub FONT              { "Times-Roman"; }
sub FONT_SIZE         { 10; }
sub DIR_LEVEL_INDENT  { 90; }
sub VERSION	      { q$Revision$; }

$y = &PAGE_TOP - &TB_MARGIN;
$prev_level = 0;
$average_char_width = &FONT_SIZE / 2;
$max_x_pos = 0;  # keep track of it in order produce bounding box

open(TMP,"+>/tmp/tree$$") or die "Can't create temporary file";
unlink("/tmp/tree$$");
select(TMP);

list_dir($ARGV[0],0);

print "showpage\n";
seek(TMP,0,0); # rewind the temporary file

select(STDOUT);

if ($y < &TB_MARGIN) {
   $page_size = (&PAGE_TOP - 2 * &TB_MARGIN);
   $scale_factor = ($page_size)/((&PAGE_TOP - &TB_MARGIN ) - $y);

   $lly = &TB_MARGIN + &FONT_SIZE * $scale_factor;
   $ty = (-$y) * $scale_factor + TB_MARGIN;
} else {
   $scale_factor = 1;
   $lly = $y + FONT_SIZE;
   $ty = 0;
};

$llx = &LEFT_MARGIN;
$urx = &LEFT_MARGIN + $max_x_pos * $scale_factor;
$ury = &PAGE_TOP - &TB_MARGIN + &FONT_SIZE * $scale_factor;
$tx  = &LEFT_MARGIN;

DSC_PrintHeader($llx, $lly, $urx, $ury);
DSC_PrintProlog();
DSC_DocumentSetup($tx, $ty, $scale_factor);

print "%%Page 1 1\n";

# copy temporary file to standard out
while (<TMP>) {
   print;
}

DSC_PrintTrailer();
exit;

#------------------------------------------ subroutine section ----


sub list_dir
{
    my($dirname, $level) = @_;
    my(@content, $file);

    if ($MaxDepth == -1 || level < $MaxDepth) {
	opendir(D,$dirname);
	@content = sort(grep(!/^\.\.?$/,readdir(D)));
	closedir(D);

	while ($file = shift(@content)) {
	    next if $file =~ /^\./ && !$ListAll;
	    next if $ExcludeFile && eval $ExcludeFile;
	    $file = "$dirname/$file";
	    if ((-d $file) || ((-l $file) && $ForceLinks && !(-f $file))) {
		if (-l $file) {     # symbolic link; do not follow these
		    emitt(fmtName($file), $level + 1);
		} else {
	            list_dir($file,$level+1);
		}
	    } elsif ($ListFiles) {
		emitt(fmtName($file), $level+1);
	    }
	}
    }
    emitt(fmtName($dirname), $level);
}

sub fmtName
{
    my($file) = @_;
    my($linkname, $abslinkname, $dirname, $basename);

    ($dirname) = dirname($file);
    ($basename) = basename($file);
    $basename = '/' unless $basename;	# kludge for /

    if (-l $file) {
	$linkname = readlink $file;
	$abslinkname = $linkname =~ m#^/# ? $linkname
                                          : "$dirname/$linkname";
	if ($ShowLinkTarget) {
	    return $basename . " -> " . $linkname . &ft($abslinkname);
	} else {
	    return $basename . &ft($file);
	}
    }
    return $basename . &ft($file);
}

sub ft
{
    my($file) = @_;
    my($link);
	
    return '' unless $ListTypes;
    lstat($file);

    if (-l $file) {
	$link = readlink($file);
	$abslink = $link =~ m#^/# ? $link : &dirname($file) . '/' . $link;
	stat($abslink);
	return '>' if -d _;
	return '@' if -e _;
	return '&';
    }
    return '=' if -S _;	# File is an AF_UNIX domain socket.
    return '|' if -p _;	# File is a named pipe (fifo)
    return '%' if -c _;	# File is a character device
    return '#' if -b _;	# File is a block device
    return '/' if -d _;	# File is directory
    return '*' if -x _;	# File is executable
    return '';
}

# Uses the following global variables:
#    $y          : current vertical position (initial value = 'top of page')
#    $prev_level : the level reportet last time on emit (init value = 0)
#    @top        : current top position at different levels
#    @bottom     : current bottom position at different levels
#    @pos        : array of positions at different levels
@pos;
@top;
@bottom;

sub emitt
{
    my($text, $level) = @_;
    #print STDERR "emitt($text, $level)\n";

    # Do some substitutions on the $text so that it can be used as a
    # PostScript string constant.
    $text =~ s/[\\\(\)]/\\$&/g;

    if ($level == $prev_level) {
	#print STDERR "same\n";
	showtext($level,$y,$text,1);
	push(@{$pos[$level]}, $y);
	$bottom[$level] = $y;
	$y -= &FONT_SIZE;
    } elsif ($level > $prev_level) {
	#print STDERR "down\n";
	showtext($level, $y, $text, 1);
	for ($i=$prev_level+1;$i<$level;$i++) {
	    @{$pos[$i]} = ();
	}
	@{$pos[$level]} = ($y);
	$top[$level] = $y;
	$bottom[$level] = $y;
	$y -= &FONT_SIZE;
    } elsif ($level == ($prev_level - 1)) {
	#print STDERR "up\n";
	my $ypos = ($top[$level+1] - $bottom[$level+1]) / 2 +
                   $bottom[$level+1];
	showtext($level, $ypos, $text, 0);
	lines($level,$ypos,$pos[$level+1],$text);
	if (@{$pos[$level]}) {
	    push(@{$pos[$level]}, $ypos);
	    $bottom[$level] = $ypos;
	} else {
	    push(@{$pos[$level]}, $ypos);
	    $top[$level] = $ypos;
	    $bottom[$level] = $ypos;
	}
    } else {
	die "Bummer..., jump from level $prev_level to level $level";
    }
    $prev_level = $level;
}

sub showtext
{
    my($x,$y,$text,$pop_stringwidth) = @_;
    #print STDERR "showtext($x,$y,$text)\n";
    my($max_stringwidth) = &DIR_LEVEL_INDENT * 0.9;
    $x = $x * &DIR_LEVEL_INDENT;
    printf "(%s) %.1f %.1f %.2f mws", $text, $x, $y, $max_stringwidth;
    print " pop" if $pop_stringwidth;
    print "\n";
    # Try to estimate the width of the string
    my($stringwidth) = length($text) * $average_char_width;
    $x += $stringwidth > $max_stringwidth ? $max_stringwidth : $stringwidth;
    $max_x_pos = $x if ($x > $max_x_pos);
}

sub lines
{
    my($x,$y,$to,$text) = @_;
    $x = $x * &DIR_LEVEL_INDENT;
    $y += &FONT_SIZE / 3;
    printf "%.1f add %.1f m\n",$x+1,$y;
    printf "[";
    for (@$to) { printf "%.1f\n", $_ + &FONT_SIZE / 3; }
    printf "]\n";
    printf "{gsave %.1f exch lineto stroke grestore} forall\n",
           $x + &DIR_LEVEL_INDENT - 4;
}

sub dirname	# (@pathnames) -> @dirnames
{
    my(@paths) = @_;
    my($pfx);

    for (@paths) {
	m,^(/?/?)/*,; $pfx=$1; $_=$'; # collect leading slashes
	s,/+$,,;			# strip trailing slashes
	s,[^/]+$,,;			# strip basename
	s,/+$,,;			# strip trailing slashes again
	length($pfx) || ($pfx='./');	# no null paths
	$_=$pfx.$_;			# prefix + tail
    }
    return @paths;
}

sub basename	# (@pathnames) -> @basenames
{
    my(@paths) = @_;
    for (@paths) {
	s,/+$,,;
	s,.*/,,;
    }
    return @paths;
}

sub DSC_PrintHeader
# Print Document Header.
{
	my($llx, $lly, $urx, $ury) = @_;

	print "%!PS-Adobe-3.0 EPSF-3.0\n";
	print "%%Title: (Directory map of $ARGV[0])\n";
	printf "%%%%Creator: pstree %s, (C) 1991-1994 Gisle Aas, NR\n", &VERSION;
	print "%%CreationDate: ", scalar(localtime), "\n";
	printf "%%%%DocumentNeededResources: font %s\n", &FONT;
	printf "%%%%BoundingBox: %.0f %.0f %.0f %.0f\n", $llx, $lly, $urx, $ury;
	print "%%EndComments\n\n";
}

sub DSC_PrintProlog
# Print Document Prolog.
# Definition of procedures.
# Do not forget to update revision number of procset!
{
	print "%%BeginProlog\n";
	print "%%BeginResource: procset pstree 1.7 0\n";
	print <<'EOT';
/mws
{
    1 dict begin
    gsave
    /sw 4 index stringwidth pop def
    dup sw le { %if
      dup sw div
      dup 1 3 div lt {
	dup 3 mul
      } {
        1
      } ifelse
      matrix scale currentfont exch makefont setfont
      /sw exch def
    } { %else
      pop
    } ifelse
    % The stack is now: (string) x y
    moveto show
    grestore
    sw % leave width of string on stack
  end
} def
EOT
	print "/s {show} bind def\n";
	print "/m {moveto} bind def\n";

	print "%%EndResource\n";
	print "%%EndProlog\n";
}

sub DSC_DocumentSetup
{
	my($tx, $ty, $sf) = @_;

	print "%%BeginSetup\n";
	printf "/%s findfont %d scalefont setfont\n", FONT, FONT_SIZE;
	print  "0.1 setlinewidth\n";
   	printf "%.1f %.3f translate\n", $tx, $ty;
	printf "%.5f dup scale\n", $sf unless $sf == 1;
	print "%%EndSetup\n";
}

sub DSC_PrintTrailer
{
	print "%%Trailer\n";
	print "%%EOF\n";
}

__END__

=head1 NAME

pstree - produce directory layout map as PostScript

=head1 SYNOPSIS

 pstree [-afFLv] [-d <max_depth>] [-e <perl-expr>] [<dirname>]

=head1 DESCRIPTION

The output from this program is a PostScript program that will produce
a "layout map" of the directory tree from the current directory and
down. If a F<dirname> is given the directory map from the given
directory and down is produced.  Without any options, only directories
or symbolic links pointing to directories are included in the map.
The output conforms to Adobe's document structuring conventions
(version 3.0), and the EPSF specification version 3.0.

=head1 OPTIONS

=over 4


=item -a

List all files in directories, including all files with names that start
with a `.'.

=item -e I<perl-expr>

Exclude file from listing if the I<perl-expr> returns true.  The
I<perl-expr> may use the file name (perl variable C<$file>) and the
complete pathname of the directory of the current file (perl variable
C<$dirname>).

To exclude, e.g., all block special files:

   -e '-b $dirname/$file',

To exclude all backup files:

   -e '$file =~ /\.BKP$/',

To exclude all files and directories within RCS directories:

   -e '$dirname =~ /\/RCS\//',

To exclude all files and directories within RCS directories: and the
directory RCS itself:

   -e '$file =~ /RCS/'

=item -d I<max_depth>

Descend at most max_depth (a non-negative integer) levels
of directories below the given directory.

=item -f

Include ordinary files and links to ordinary files in the map.
Without this flag only the overall directory structure is shown.

=item -F

append the following characters depending on the file type:

  =	File is an AF_UNIX domain socket.
  |	File is a named pipe (fifo)
  %	File is a character device
  #	File is a block device
  /	File is a directory
  *	File is executable
  @	File is a symbolic link pointing to a non-directory
  >	File is a symbolic link pointing to a directory
  &	File is a symbolic link pointing to nowhere

=item -l

Show link targets, i.e. where symbolic links are pointing to.

=item -L

Include links pointing to nowhere in the map.

=item -v

print version ond standard error and quit.

=back


=head1 SEE ALSO

L<find>, L<ls>

=head1 BUGS

The image is not scaled down if it overflows the right edge of the page.
Symbolic links are never traversed to avoid problems with circular links.

=head1 AUTHOR

Gisle Aas, Norwegian Computing Centre (NR), 1991. <Gisle.Aas@nr.no>
with additions of Peter W. Osel, Siemens AG, Munich, 1993, 1994.
<pwo@HL.Siemens.DE>

=cut
